CREATE TABLE Customers (
	CustomerID INT PRIMARY KEY,
    FullName VARCHAR(255) NOT NULL,
    ContactNumber INT NOT NULL,
    Email VARCHAR(255) NOT NULL    
);

CREATE TABLE Bookings (
	BookingID INT PRIMARY KEY,
    TableNumber INT,
    BookingDate DATE,
    CustomerID INT
);

CREATE TABLE MenuItems (
	MenuItemsID INT PRIMARY KEY,
    CourseName VARCHAR(255),
    StarterName VARCHAR(255),
    DesertName VARCHAR(255)
);

CREATE TABLE Menus (
	MenuID INT PRIMARY KEY,
    MenuItemsID INT NOT NULL,
    MenuName VARCHAR(255),
    Cuisine VARCHAR(255),
    FOREIGN KEY (MenuItemsID) REFERENCES MenuItems(MenuItemsID)
);

CREATE TABLE Orders (
	OrderID INT PRIMARY KEY,
    MenuID INT NOT NULL, 
    CustomerID INT NOT NULL,
    TotalCost DECIMAL(10,2),
    FOREIGN KEY (MenuID) REFERENCES Menus(MenuID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE Devlivery (
	DeliveryID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    DeliveryStatus VARCHAR(255),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE Orders
DROP COLUMN TotalCost;

CREATE OR REPLACE VIEW OrdersView AS
SELECT OrderID, Quantity, Cost FROM Orders
WHERE Quantity > 2;

SELECT Customers.CustomerID, Customers.FullName, Orders.OrderID, Orders.Cost, Menus.MenuName, MenuItems.CourseName
FROM Customers JOIN Orders
ON Customers.CustomerID = Orders.CustomerID
JOIN Menus ON Orders.MenuID = Menus.MenuID
JOIN MenuItems ON MenuItems.MenuItemsID = Menus.MenuItemsID WHERE Cost > 150 ORDER BY Cost;

CREATE PROCEDURE GetMaxQuantity()
SELECT MAX(Quantity) AS 'Max quantity in order' FROM Orders;

CREATE PROCEDURE MakeBooking (booking_id INT, customer_id INT, table_no INT, booking_date DATE)
BEGIN
	INSERT INTO bookings (BookingID, BookingDate, TableNumber, CustomerID) 
		VALUES (booking_id, booking_date, table_no, Customer_id);
	SELECT 'New Booking Added' AS 'Confirmation'
END

CREATE PROCEDURE CheckBooking(booking_date DATE, table_number INT)
BEGIN
	DECLARE bookedTable INT DEFAULT 0;
    SELECT COUNT(bookedTable)
		INTO bookedTable
        FROM Bookings WHERE BookingDate = booking_date AND TableNumber = table_number;
        IF bookedTable > 0 THEN
			SELECT CONCAT("Table: ", table_number, " is already booked") AS "Booking status";
            ELSE 
            SELECT CONCAT("Table: ", table_number, " is not booked") AS "Booking status";
		END IF;
END

CREATE DEFINER='admin1'@'%' PROCEDURE UpdateBooking(booking_id INT, booking_date DATE)
BEGIN
UPDATE bookings SET BookingDate = booking_date WHERE BookingID = booking_id;
SELECT CONCAT("Booking ". booking_id, " updated") AS Confirmation;
END

